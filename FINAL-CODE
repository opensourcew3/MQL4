//+------------------------------------------------------------------+
//|     Combined Dashboard and Hotkey EA                             |
//|     Created by: Nora MQL5 Coder & Integrated by You              |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

CTrade trade;

input double InitialVolume = 0.01;  
input double VolumeStep = 0.01;  

double LotSize = InitialVolume;

// Hotkeys
#define KEY_BUY 97       
#define KEY_SELL 98       
#define KEY_CLOSE_ALL 99  
#define KEY_CLOSE_BUY 100 
#define KEY_CLOSE_SELL 101 
#define KEY_REVERSE_BUY 103 
#define KEY_REVERSE_SELL 104 
#define KEY_INCREASE_LOT 38  
#define KEY_DECREASE_LOT 40  

// Dashboard settings
#define X 10
#define Y 10
#define LINE_SPACE 25

int xPos = X, yPos = Y;

//+------------------------------------------------------------------+
//| Script program start function                                    |
//+------------------------------------------------------------------+
int OnInit()
{
   CreateDashboard();
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Deinitialization code for Dashboard EA
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   UpdateDashboard();
}

// Function to handle hotkey press
void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam)
{
   if (id == CHARTEVENT_KEYDOWN)
   {
      int key = (int)lparam;

      switch (key)
      {
         case KEY_BUY:
            trade.Buy(LotSize, Symbol());
            Print("✅ Buy Order Placed: ", LotSize);
            break;

         case KEY_SELL:
            trade.Sell(LotSize, Symbol());
            Print("✅ Sell Order Placed: ", LotSize);
            break;

         case KEY_CLOSE_BUY:
            ClosePositions(POSITION_TYPE_BUY);
            break;

         case KEY_CLOSE_SELL:
            ClosePositions(POSITION_TYPE_SELL);
            break;

         case KEY_CLOSE_ALL:
            CloseAllPositions();
            break;

         case KEY_REVERSE_BUY:
            ReverseBuy();
            break;

         case KEY_REVERSE_SELL:
            ReverseSell();
            break;

         case KEY_INCREASE_LOT:
            LotSize += VolumeStep;
            Print("✅ Lot Size Increased: ", LotSize);
            break;

         case KEY_DECREASE_LOT:
            LotSize = MathMax(InitialVolume, LotSize - VolumeStep);
            Print("⏬ Lot Size Decreased: ", LotSize);
            break;

         default:
            Print("🚫 Unused Key Pressed: ", key);
            break;
      }
   } else if (id == CHARTEVENT_OBJECT_DRAG && sparam == "Dashboard_BG") {
      xPos = (int)ObjectGetInteger(ChartID(), sparam, OBJPROP_XDISTANCE);
      yPos = (int)ObjectGetInteger(ChartID(), sparam, OBJPROP_YDISTANCE);
      UpdateDashboard();
   }
}

void ClosePositions(int positionType)
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_TYPE) == positionType)
      {
         trade.PositionClose(ticket);
         Sleep(1);
         HistorySelect(0, TimeCurrent());
      }
   }
   Print("✅ Closed All ", (positionType == POSITION_TYPE_BUY) ? "Buy" : "Sell", " Positions");
}

void CloseAllPositions()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (PositionSelectByTicket(ticket))
      {
         trade.PositionClose(ticket);
         Sleep(1);
         HistorySelect(0, TimeCurrent());
      }
   }
   Print("🔥 All Positions Closed!");
}

void ReverseBuy()
{
   double totalLots = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
      {
         totalLots += PositionGetDouble(POSITION_VOLUME);
         trade.PositionClose(ticket);
         Sleep(1);
         HistorySelect(0, TimeCurrent());
      }
   }
   if (totalLots > 0)
   {
      trade.Sell(totalLots * 2, Symbol());
      Print("🔥 Reverse Buy -> Sell ", totalLots * 2, " Lots");
   }
}

void ReverseSell()
{
   double totalLots = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if (PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
      {
         totalLots += PositionGetDouble(POSITION_VOLUME);
         trade.PositionClose(ticket);
         Sleep(1);
         HistorySelect(0, TimeCurrent());
      }
   }
   if (totalLots > 0)
   {
      trade.Buy(totalLots * 2, Symbol());
      Print("🔥 Reverse Sell -> Buy ", totalLots * 2, " Lots");
   }
}

void CreateDashboard()
{
   CreateRectangle("Dashboard_BG", xPos, yPos, 300, 160, clrSilver);

   int line_y = 10;

   CreateLabel("BUY_TITLE", "B U Y", 10, line_y, clrBlue, 14);
   line_y += LINE_SPACE;

   CreateLabel("BUY LOT", "LOT: 0.00", 10, line_y, clrBlue, 12);
   line_y += LINE_SPACE;

   CreateLabel("BUY PROFIT", "PROFIT: $0.00", 10, line_y, clrBlue, 12);
   line_y += LINE_SPACE + 10;

   CreateLabel("SELL_TITLE", "S E L L", 160, 10, clrRed, 14);
   CreateLabel("SELL LOT", "LOT: 0.00", 160, 35, clrRed, 12);
   CreateLabel("SELL PROFIT", "PROFIT: $0.00", 160, 60, clrRed, 12);

   CreateLabel("TOTAL PROFIT", "T O T A L 💪: $0.00", 80, 130, clrYellow, 15);
}

void CreateRectangle(string name, int x, int y, int width, int height, color bg)
{
   if (ObjectFind(ChartID(), name) < 0)
   {
      ObjectCreate(ChartID(), name, OBJ_RECTANGLE_LABEL, 0, 0, 0);
      ObjectSetInteger(ChartID(), name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
      ObjectSetInteger(ChartID(), name, OBJPROP_XDISTANCE, x);
      ObjectSetInteger(ChartID(), name, OBJPROP_YDISTANCE, y);
      ObjectSetInteger(ChartID(), name, OBJPROP_XSIZE, width);
      ObjectSetInteger(ChartID(), name, OBJPROP_YSIZE, height);
      ObjectSetInteger(ChartID(), name, OBJPROP_COLOR, bg);
      ObjectSetInteger(ChartID(), name, OBJPROP_WIDTH, 2);
      ObjectSetInteger(ChartID(), name, OBJPROP_SELECTABLE, true);
      ObjectSetInteger(ChartID(), name, OBJPROP_SELECTED, true);
   }
}

void CreateLabel(string name, string text, int offset_x, int offset_y, color col, int fontsize)
{
   if (ObjectFind(ChartID(), name) < 0)
   {
      ObjectCreate(ChartID(), name, OBJ_LABEL, 0, 0, 0);
      ObjectSetString(ChartID(), name, OBJPROP_TEXT, text);
      ObjectSetInteger(ChartID(), name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
      ObjectSetInteger(ChartID(), name, OBJPROP_XDISTANCE, xPos + offset_x);
      ObjectSetInteger(ChartID(), name, OBJPROP_YDISTANCE, yPos + offset_y);
      ObjectSetInteger(ChartID(), name, OBJPROP_FONTSIZE, fontsize);
      ObjectSetInteger(ChartID(), name, OBJPROP_COLOR, col);
   }
}

void UpdateDashboard()
{
   double BuyLots = 0, BuyProfit = 0;
   double SellLots = 0, SellProfit = 0;

   for (int i = 0; i < PositionsTotal(); i++)
   {
      ulong ticket = PositionGetTicket(i);
      if (PositionSelectByTicket(ticket))
      {
         double profit = PositionGetDouble(POSITION_PROFIT);
         double lots = PositionGetDouble(POSITION_VOLUME);
         int type = PositionGetInteger(POSITION_TYPE);

         if (type == ORDER_TYPE_BUY)
         {
            BuyLots += lots;
            BuyProfit += profit;
         }
         if (type == ORDER_TYPE_SELL)
         {
            SellLots += lots;
            SellProfit += profit;
         }
      }
   }

   ObjectSetString(ChartID(), "BUY LOT", OBJPROP_TEXT, "LOT: " + DoubleToString(BuyLots, 2));
   ObjectSetString(ChartID(), "BUY PROFIT", OBJPROP_TEXT, "PROFIT: $" + DoubleToString(BuyProfit, 2));
   ObjectSetInteger(ChartID(), "BUY PROFIT", OBJPROP_COLOR, (BuyProfit >= 0) ? clrBlue : clrRed);

   ObjectSetString(ChartID(), "SELL LOT", OBJPROP_TEXT, "LOT: " + DoubleToString(SellLots, 2));
   ObjectSetString(ChartID(), "SELL PROFIT", OBJPROP_TEXT, "PROFIT: $" + DoubleToString(SellProfit, 2));
   ObjectSetInteger(ChartID(), "SELL PROFIT", OBJPROP_COLOR, (SellProfit >= 0) ? clrBlue : clrRed);

   ObjectSetString(ChartID(), "TOTAL PROFIT", OBJPROP_TEXT, "T O T A L 💪: $" + DoubleToString(BuyProfit + SellProfit, 2));
   ObjectSetInteger(ChartID(), "TOTAL PROFIT", OBJPROP_COLOR, (BuyProfit + SellProfit >= 0) ? clrGreen : clrRed);
}
